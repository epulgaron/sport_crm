{"info":{"name":"api","schema":"https://schema.getpostman.com/json/collection/v2.0.0/collection.json"},"item":[{"name":"api","item":[{"name":"site","item":[{"name":"site/login","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/site/login","description":"Servicio para autenticarse en la aplicación \nSe envía las credenciales del usuario de esta forma\n<ul>Parámetros:\n  <li>Credenciales del usuario\n  {\n    \"username\":\"valor,\"\n    \"password\":\"valor\"\n},\n</li>\n<li> Retorna los datos del usuario logueado o si no error en autenticación\n</li>\n</ul>\n","response":[]}},{"name":"site/logout","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/site/signup","description":"Servicio para salir de la aplicación \nPetición por método post para salir de la aplicación es una función segura por lo que tiene q estar acompañada de un metodo de autenticación\n<ul>\n<li> Retorna los datos del usuario registrado o si no error en creación de usuario\n</li>\n</ul>\n","response":[]}},{"name":"site/signup","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/site/signup","description":"Servicio para registrarse en la aplicación \nSe envía los datos del usuario si incluye email se le manda el método de acivación (este código esta comentareado) \n en este método se cifra la contraseña y se genera el token para la autenticación BEARER  \n<ul>Parámetros:\n  <li>Credenciales del usuario\n  {\n\t\"nombre_usuario\":\"valor\",\n\t\"apellido_usuario\":\"valor\",\n\t\"username\":\"valor\",\n\t\"pass\":\"valor\",\n\t\"email\":\"correo@localhost.com\"\n}</li>\n<li> Retorna los datos del usuario registrado o si no error en creación de usuario\n</li>\n</ul>\n","response":[]}}],"_postman_isSubFolder":true},{"name":"security","item":[{"name":"roles","item":[{"name":"roles_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles","description":"Servicio para devolver el listado de la tabla roles\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"roles_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla roles\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"roles_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles","description":"Servicio para devolver un  elemento de la tabla roles\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"roles_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles","description":"Servicio para crear uno o varios elementos en la tabla roles \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"roles_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/0","description":"\"Servicio para actualizar un elemento en la tabla roles \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"roles_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla roles \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"roles_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/0","description":"Servicio para eliminar un elemento en la tabla roles \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"roles_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/delete_parameters","description":"Servicio para eliminar un elemento en la tabla roles \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"roles_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/delete_by_id","description":"Servicio para eliminar un elemento en la tabla roles \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"roles_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/roles/validate","description":"Servicio para validar un elemento en la tabla roles \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"users","item":[{"name":"users_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users","description":"Servicio para devolver el listado de la tabla users\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"users_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla users\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"users_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users","description":"Servicio para devolver un  elemento de la tabla users\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"users_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users","description":"Servicio para crear uno o varios elementos en la tabla users \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"users_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/0","description":"\"Servicio para actualizar un elemento en la tabla users \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"users_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla users \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"users_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/0","description":"Servicio para eliminar un elemento en la tabla users \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"users_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/delete_parameters","description":"Servicio para eliminar un elemento en la tabla users \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"users_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/delete_by_id","description":"Servicio para eliminar un elemento en la tabla users \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"users_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/users/validate","description":"Servicio para validar un elemento en la tabla users \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"permissions","item":[{"name":"permissions_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions","description":"Servicio para devolver el listado de la tabla permissions\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"permissions_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla permissions\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"permissions_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions","description":"Servicio para devolver un  elemento de la tabla permissions\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"permissions_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions","description":"Servicio para crear uno o varios elementos en la tabla permissions \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"permissions_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/0","description":"\"Servicio para actualizar un elemento en la tabla permissions \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"permissions_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla permissions \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"permissions_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/0","description":"Servicio para eliminar un elemento en la tabla permissions \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"permissions_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/delete_parameters","description":"Servicio para eliminar un elemento en la tabla permissions \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"permissions_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/delete_by_id","description":"Servicio para eliminar un elemento en la tabla permissions \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"permissions_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/permissions/validate","description":"Servicio para validar un elemento en la tabla permissions \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"role_permission_list","item":[{"name":"role_permission_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list","description":"Servicio para devolver el listado de la tabla role_permission_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"role_permission_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla role_permission_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"role_permission_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list","description":"Servicio para devolver un  elemento de la tabla role_permission_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"role_permission_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list","description":"Servicio para crear uno o varios elementos en la tabla role_permission_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"role_permission_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/0","description":"\"Servicio para actualizar un elemento en la tabla role_permission_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"role_permission_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla role_permission_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"role_permission_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/0","description":"Servicio para eliminar un elemento en la tabla role_permission_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"role_permission_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla role_permission_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"role_permission_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla role_permission_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"role_permission_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/security/role_permission_list/validate","description":"Servicio para validar un elemento en la tabla role_permission_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true}],"_postman_isSubFolder":true},{"name":"types","item":[{"name":"countries","item":[{"name":"countries_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries","description":"Servicio para devolver el listado de la tabla countries\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"countries_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla countries\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"countries_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries","description":"Servicio para devolver un  elemento de la tabla countries\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"countries_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries","description":"Servicio para crear uno o varios elementos en la tabla countries \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"countries_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/0","description":"\"Servicio para actualizar un elemento en la tabla countries \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"countries_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla countries \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"countries_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/0","description":"Servicio para eliminar un elemento en la tabla countries \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"countries_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/delete_parameters","description":"Servicio para eliminar un elemento en la tabla countries \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"countries_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/delete_by_id","description":"Servicio para eliminar un elemento en la tabla countries \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"countries_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/countries/validate","description":"Servicio para validar un elemento en la tabla countries \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"levels","item":[{"name":"levels_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels","description":"Servicio para devolver el listado de la tabla levels\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"levels_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla levels\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"levels_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels","description":"Servicio para devolver un  elemento de la tabla levels\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"levels_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels","description":"Servicio para crear uno o varios elementos en la tabla levels \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"levels_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/0","description":"\"Servicio para actualizar un elemento en la tabla levels \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"levels_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla levels \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"levels_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/0","description":"Servicio para eliminar un elemento en la tabla levels \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"levels_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/delete_parameters","description":"Servicio para eliminar un elemento en la tabla levels \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"levels_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/delete_by_id","description":"Servicio para eliminar un elemento en la tabla levels \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"levels_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/levels/validate","description":"Servicio para validar un elemento en la tabla levels \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"sports","item":[{"name":"sports_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports","description":"Servicio para devolver el listado de la tabla sports\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"sports_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla sports\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"sports_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports","description":"Servicio para devolver un  elemento de la tabla sports\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"sports_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports","description":"Servicio para crear uno o varios elementos en la tabla sports \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"sports_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/0","description":"\"Servicio para actualizar un elemento en la tabla sports \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"sports_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla sports \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"sports_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/0","description":"Servicio para eliminar un elemento en la tabla sports \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"sports_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/delete_parameters","description":"Servicio para eliminar un elemento en la tabla sports \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"sports_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/delete_by_id","description":"Servicio para eliminar un elemento en la tabla sports \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"sports_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/sports/validate","description":"Servicio para validar un elemento en la tabla sports \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"status","item":[{"name":"status_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status","description":"Servicio para devolver el listado de la tabla status\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"status_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla status\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"status_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status","description":"Servicio para devolver un  elemento de la tabla status\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"status_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status","description":"Servicio para crear uno o varios elementos en la tabla status \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"status_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/0","description":"\"Servicio para actualizar un elemento en la tabla status \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"status_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla status \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"status_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/0","description":"Servicio para eliminar un elemento en la tabla status \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"status_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/delete_parameters","description":"Servicio para eliminar un elemento en la tabla status \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"status_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/delete_by_id","description":"Servicio para eliminar un elemento en la tabla status \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"status_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/status/validate","description":"Servicio para validar un elemento en la tabla status \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"types","item":[{"name":"types_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types","description":"Servicio para devolver el listado de la tabla types\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"types_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla types\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"types_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types","description":"Servicio para devolver un  elemento de la tabla types\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"types_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types","description":"Servicio para crear uno o varios elementos en la tabla types \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"types_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/0","description":"\"Servicio para actualizar un elemento en la tabla types \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"types_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla types \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"types_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/0","description":"Servicio para eliminar un elemento en la tabla types \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"types_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/delete_parameters","description":"Servicio para eliminar un elemento en la tabla types \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"types_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/delete_by_id","description":"Servicio para eliminar un elemento en la tabla types \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"types_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/types/validate","description":"Servicio para validar un elemento en la tabla types \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"contents","item":[{"name":"contents_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents","description":"Servicio para devolver el listado de la tabla contents\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"contents_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla contents\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"contents_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents","description":"Servicio para devolver un  elemento de la tabla contents\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"contents_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents","description":"Servicio para crear uno o varios elementos en la tabla contents \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"contents_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/0","description":"\"Servicio para actualizar un elemento en la tabla contents \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"contents_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla contents \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"contents_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/0","description":"Servicio para eliminar un elemento en la tabla contents \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"contents_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/delete_parameters","description":"Servicio para eliminar un elemento en la tabla contents \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"contents_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/delete_by_id","description":"Servicio para eliminar un elemento en la tabla contents \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"contents_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/contents/validate","description":"Servicio para validar un elemento en la tabla contents \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"error_level","item":[{"name":"error_level_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level","description":"Servicio para devolver el listado de la tabla error_level\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"error_level_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla error_level\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"error_level_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level","description":"Servicio para devolver un  elemento de la tabla error_level\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"error_level_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level","description":"Servicio para crear uno o varios elementos en la tabla error_level \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"error_level_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/0","description":"\"Servicio para actualizar un elemento en la tabla error_level \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"error_level_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla error_level \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"error_level_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/0","description":"Servicio para eliminar un elemento en la tabla error_level \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"error_level_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/delete_parameters","description":"Servicio para eliminar un elemento en la tabla error_level \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"error_level_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/delete_by_id","description":"Servicio para eliminar un elemento en la tabla error_level \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"error_level_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/error_level/validate","description":"Servicio para validar un elemento en la tabla error_level \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"flows","item":[{"name":"flows_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows","description":"Servicio para devolver el listado de la tabla flows\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"flows_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla flows\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"flows_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows","description":"Servicio para devolver un  elemento de la tabla flows\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"flows_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows","description":"Servicio para crear uno o varios elementos en la tabla flows \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"flows_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/0","description":"\"Servicio para actualizar un elemento en la tabla flows \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"flows_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla flows \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"flows_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/0","description":"Servicio para eliminar un elemento en la tabla flows \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"flows_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/delete_parameters","description":"Servicio para eliminar un elemento en la tabla flows \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"flows_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/delete_by_id","description":"Servicio para eliminar un elemento en la tabla flows \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"flows_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/types/flows/validate","description":"Servicio para validar un elemento en la tabla flows \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true}],"_postman_isSubFolder":true},{"name":"managment","item":[{"name":"content_error_list","item":[{"name":"content_error_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list","description":"Servicio para devolver el listado de la tabla content_error_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"content_error_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla content_error_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"content_error_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list","description":"Servicio para devolver un  elemento de la tabla content_error_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"content_error_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list","description":"Servicio para crear uno o varios elementos en la tabla content_error_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"content_error_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/0","description":"\"Servicio para actualizar un elemento en la tabla content_error_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"content_error_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla content_error_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"content_error_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/0","description":"Servicio para eliminar un elemento en la tabla content_error_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"content_error_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla content_error_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"content_error_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla content_error_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"content_error_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_error_list/validate","description":"Servicio para validar un elemento en la tabla content_error_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"content_level_list","item":[{"name":"content_level_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list","description":"Servicio para devolver el listado de la tabla content_level_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"content_level_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla content_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"content_level_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list","description":"Servicio para devolver un  elemento de la tabla content_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"content_level_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list","description":"Servicio para crear uno o varios elementos en la tabla content_level_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"content_level_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/0","description":"\"Servicio para actualizar un elemento en la tabla content_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"content_level_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla content_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"content_level_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/0","description":"Servicio para eliminar un elemento en la tabla content_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"content_level_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla content_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"content_level_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla content_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"content_level_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/content_level_list/validate","description":"Servicio para validar un elemento en la tabla content_level_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"error_level_list","item":[{"name":"error_level_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list","description":"Servicio para devolver el listado de la tabla error_level_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"error_level_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla error_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"error_level_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list","description":"Servicio para devolver un  elemento de la tabla error_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"error_level_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list","description":"Servicio para crear uno o varios elementos en la tabla error_level_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"error_level_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/0","description":"\"Servicio para actualizar un elemento en la tabla error_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"error_level_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla error_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"error_level_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/0","description":"Servicio para eliminar un elemento en la tabla error_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"error_level_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla error_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"error_level_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla error_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"error_level_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/error_level_list/validate","description":"Servicio para validar un elemento en la tabla error_level_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"principal_school_list","item":[{"name":"principal_school_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list","description":"Servicio para devolver el listado de la tabla principal_school_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"principal_school_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla principal_school_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"principal_school_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list","description":"Servicio para devolver un  elemento de la tabla principal_school_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"principal_school_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list","description":"Servicio para crear uno o varios elementos en la tabla principal_school_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"principal_school_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/0","description":"\"Servicio para actualizar un elemento en la tabla principal_school_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"principal_school_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla principal_school_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"principal_school_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/0","description":"Servicio para eliminar un elemento en la tabla principal_school_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"principal_school_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla principal_school_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"principal_school_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla principal_school_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"principal_school_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/principal_school_list/validate","description":"Servicio para validar un elemento en la tabla principal_school_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"session_level_list","item":[{"name":"session_level_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list","description":"Servicio para devolver el listado de la tabla session_level_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"session_level_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla session_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"session_level_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list","description":"Servicio para devolver un  elemento de la tabla session_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"session_level_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list","description":"Servicio para crear uno o varios elementos en la tabla session_level_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"session_level_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/0","description":"\"Servicio para actualizar un elemento en la tabla session_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"session_level_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla session_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"session_level_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/0","description":"Servicio para eliminar un elemento en la tabla session_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"session_level_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla session_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"session_level_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla session_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"session_level_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/session_level_list/validate","description":"Servicio para validar un elemento en la tabla session_level_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"sport_student_list","item":[{"name":"sport_student_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list","description":"Servicio para devolver el listado de la tabla sport_student_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"sport_student_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla sport_student_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"sport_student_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list","description":"Servicio para devolver un  elemento de la tabla sport_student_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"sport_student_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list","description":"Servicio para crear uno o varios elementos en la tabla sport_student_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"sport_student_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/0","description":"\"Servicio para actualizar un elemento en la tabla sport_student_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"sport_student_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla sport_student_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"sport_student_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/0","description":"Servicio para eliminar un elemento en la tabla sport_student_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"sport_student_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla sport_student_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"sport_student_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla sport_student_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"sport_student_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/sport_student_list/validate","description":"Servicio para validar un elemento en la tabla sport_student_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"teacher_sport_list","item":[{"name":"teacher_sport_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list","description":"Servicio para devolver el listado de la tabla teacher_sport_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"teacher_sport_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla teacher_sport_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"teacher_sport_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list","description":"Servicio para devolver un  elemento de la tabla teacher_sport_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"teacher_sport_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list","description":"Servicio para crear uno o varios elementos en la tabla teacher_sport_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"teacher_sport_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/0","description":"\"Servicio para actualizar un elemento en la tabla teacher_sport_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"teacher_sport_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla teacher_sport_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"teacher_sport_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/0","description":"Servicio para eliminar un elemento en la tabla teacher_sport_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"teacher_sport_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla teacher_sport_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"teacher_sport_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla teacher_sport_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"teacher_sport_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/teacher_sport_list/validate","description":"Servicio para validar un elemento en la tabla teacher_sport_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"test_level_list","item":[{"name":"test_level_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list","description":"Servicio para devolver el listado de la tabla test_level_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"test_level_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla test_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"test_level_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list","description":"Servicio para devolver un  elemento de la tabla test_level_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"test_level_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list","description":"Servicio para crear uno o varios elementos en la tabla test_level_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"test_level_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/0","description":"\"Servicio para actualizar un elemento en la tabla test_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"test_level_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla test_level_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"test_level_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/0","description":"Servicio para eliminar un elemento en la tabla test_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"test_level_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla test_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"test_level_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla test_level_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"test_level_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_level_list/validate","description":"Servicio para validar un elemento en la tabla test_level_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"test_session_list","item":[{"name":"test_session_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list","description":"Servicio para devolver el listado de la tabla test_session_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"test_session_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla test_session_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"test_session_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list","description":"Servicio para devolver un  elemento de la tabla test_session_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"test_session_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list","description":"Servicio para crear uno o varios elementos en la tabla test_session_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"test_session_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/0","description":"\"Servicio para actualizar un elemento en la tabla test_session_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"test_session_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla test_session_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"test_session_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/0","description":"Servicio para eliminar un elemento en la tabla test_session_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"test_session_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla test_session_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"test_session_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla test_session_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"test_session_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_session_list/validate","description":"Servicio para validar un elemento en la tabla test_session_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"test_student_list","item":[{"name":"test_student_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list","description":"Servicio para devolver el listado de la tabla test_student_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"test_student_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla test_student_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"test_student_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list","description":"Servicio para devolver un  elemento de la tabla test_student_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"test_student_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list","description":"Servicio para crear uno o varios elementos en la tabla test_student_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"test_student_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/0","description":"\"Servicio para actualizar un elemento en la tabla test_student_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"test_student_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla test_student_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"test_student_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/0","description":"Servicio para eliminar un elemento en la tabla test_student_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"test_student_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla test_student_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"test_student_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla test_student_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"test_student_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_student_list/validate","description":"Servicio para validar un elemento en la tabla test_student_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"test_teacher_list","item":[{"name":"test_teacher_list_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list","description":"Servicio para devolver el listado de la tabla test_teacher_list\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"test_teacher_list_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla test_teacher_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"test_teacher_list_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list","description":"Servicio para devolver un  elemento de la tabla test_teacher_list\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"test_teacher_list_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list","description":"Servicio para crear uno o varios elementos en la tabla test_teacher_list \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"test_teacher_list_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/0","description":"\"Servicio para actualizar un elemento en la tabla test_teacher_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"test_teacher_list_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla test_teacher_list \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"test_teacher_list_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/0","description":"Servicio para eliminar un elemento en la tabla test_teacher_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"test_teacher_list_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/delete_parameters","description":"Servicio para eliminar un elemento en la tabla test_teacher_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"test_teacher_list_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/delete_by_id","description":"Servicio para eliminar un elemento en la tabla test_teacher_list \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"test_teacher_list_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/test_teacher_list/validate","description":"Servicio para validar un elemento en la tabla test_teacher_list \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"tests","item":[{"name":"tests_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests","description":"Servicio para devolver el listado de la tabla tests\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"tests_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla tests\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"tests_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests","description":"Servicio para devolver un  elemento de la tabla tests\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"tests_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests","description":"Servicio para crear uno o varios elementos en la tabla tests \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"tests_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/0","description":"\"Servicio para actualizar un elemento en la tabla tests \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"tests_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla tests \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"tests_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/0","description":"Servicio para eliminar un elemento en la tabla tests \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"tests_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/delete_parameters","description":"Servicio para eliminar un elemento en la tabla tests \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"tests_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/delete_by_id","description":"Servicio para eliminar un elemento en la tabla tests \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"tests_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/tests/validate","description":"Servicio para validar un elemento en la tabla tests \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true}],"_postman_isSubFolder":true},{"name":"reports","item":[],"_postman_isSubFolder":true},{"name":"payment","item":[],"_postman_isSubFolder":true},{"name":"entities","item":[{"name":"principals","item":[{"name":"principals_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals","description":"Servicio para devolver el listado de la tabla principals\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"principals_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla principals\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"principals_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals","description":"Servicio para devolver un  elemento de la tabla principals\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"principals_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals","description":"Servicio para crear uno o varios elementos en la tabla principals \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"principals_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/0","description":"\"Servicio para actualizar un elemento en la tabla principals \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"principals_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla principals \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"principals_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/0","description":"Servicio para eliminar un elemento en la tabla principals \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"principals_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/delete_parameters","description":"Servicio para eliminar un elemento en la tabla principals \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"principals_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/delete_by_id","description":"Servicio para eliminar un elemento en la tabla principals \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"principals_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/principals/validate","description":"Servicio para validar un elemento en la tabla principals \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"students","item":[{"name":"students_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students","description":"Servicio para devolver el listado de la tabla students\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"students_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla students\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"students_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students","description":"Servicio para devolver un  elemento de la tabla students\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"students_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students","description":"Servicio para crear uno o varios elementos en la tabla students \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"students_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/0","description":"\"Servicio para actualizar un elemento en la tabla students \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"students_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla students \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"students_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/0","description":"Servicio para eliminar un elemento en la tabla students \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"students_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/delete_parameters","description":"Servicio para eliminar un elemento en la tabla students \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"students_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/delete_by_id","description":"Servicio para eliminar un elemento en la tabla students \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"students_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/students/validate","description":"Servicio para validar un elemento en la tabla students \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"teachers","item":[{"name":"teachers_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers","description":"Servicio para devolver el listado de la tabla teachers\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"teachers_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla teachers\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"teachers_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers","description":"Servicio para devolver un  elemento de la tabla teachers\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"teachers_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers","description":"Servicio para crear uno o varios elementos en la tabla teachers \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"teachers_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/0","description":"\"Servicio para actualizar un elemento en la tabla teachers \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"teachers_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla teachers \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"teachers_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/0","description":"Servicio para eliminar un elemento en la tabla teachers \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"teachers_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/delete_parameters","description":"Servicio para eliminar un elemento en la tabla teachers \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"teachers_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/delete_by_id","description":"Servicio para eliminar un elemento en la tabla teachers \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"teachers_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/teachers/validate","description":"Servicio para validar un elemento en la tabla teachers \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"sessions","item":[{"name":"sessions_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions","description":"Servicio para devolver el listado de la tabla sessions\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"sessions_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla sessions\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"sessions_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions","description":"Servicio para devolver un  elemento de la tabla sessions\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"sessions_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions","description":"Servicio para crear uno o varios elementos en la tabla sessions \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"sessions_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/0","description":"\"Servicio para actualizar un elemento en la tabla sessions \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"sessions_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla sessions \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"sessions_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/0","description":"Servicio para eliminar un elemento en la tabla sessions \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"sessions_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/delete_parameters","description":"Servicio para eliminar un elemento en la tabla sessions \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"sessions_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/delete_by_id","description":"Servicio para eliminar un elemento en la tabla sessions \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"sessions_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/sessions/validate","description":"Servicio para validar un elemento en la tabla sessions \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"schools","item":[{"name":"schools_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools","description":"Servicio para devolver el listado de la tabla schools\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"schools_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla schools\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"schools_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools","description":"Servicio para devolver un  elemento de la tabla schools\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"schools_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools","description":"Servicio para crear uno o varios elementos en la tabla schools \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"schools_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/0","description":"\"Servicio para actualizar un elemento en la tabla schools \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"schools_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla schools \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"schools_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/0","description":"Servicio para eliminar un elemento en la tabla schools \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"schools_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/delete_parameters","description":"Servicio para eliminar un elemento en la tabla schools \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"schools_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/delete_by_id","description":"Servicio para eliminar un elemento en la tabla schools \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"schools_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/schools/validate","description":"Servicio para validar un elemento en la tabla schools \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"errors","item":[{"name":"errors_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors","description":"Servicio para devolver el listado de la tabla errors\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"errors_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla errors\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"errors_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors","description":"Servicio para devolver un  elemento de la tabla errors\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"errors_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors","description":"Servicio para crear uno o varios elementos en la tabla errors \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"errors_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/0","description":"\"Servicio para actualizar un elemento en la tabla errors \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"errors_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla errors \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"errors_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/0","description":"Servicio para eliminar un elemento en la tabla errors \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"errors_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/delete_parameters","description":"Servicio para eliminar un elemento en la tabla errors \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"errors_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/delete_by_id","description":"Servicio para eliminar un elemento en la tabla errors \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"errors_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/entities/errors/validate","description":"Servicio para validar un elemento en la tabla errors \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true},{"name":"evaluation","item":[{"name":"evaluation_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation","description":"Servicio para devolver el listado de la tabla evaluation\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>","response":[]}},{"name":"evaluation_select_2_list","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/select_2_list","description":"Servicio para devolver el listado para <a href=\"https://select2.org/\">select2</a> de la tabla evaluation\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación \n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n<li>pagination--atributo objeto que contendrá el número de elementos por páginas y la página donde desee posicionarse<li>select--atributo arreglo que contendrá solamentes los atributos que quiere devolver , si es null te devuelve todos los atributos, solo se aplica para la tabla principal de la consulta<ul>\n<li>\n\t<pre>\n\t\"pagination\": {\n\t\t\"page\": valor\n\t\t\"pagesize\": valor\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li><li>attr-- atributo objeto que contiene los parámetros para la búsqueda por un campo que sea igual al valor o valores que se le pasa.<strong>Ejemplo</strong>\n<ul>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": valor\n\t}\n\t</pre>\n</li>\n<li>\n\t<pre>\n\t\"attr\": {\n\t\t\"campo\": [valor,valor,valor,valor...]\n\t}\n\t</pre>\n</li>\n</ul>\n</li>\n<li>oper-- atributo arreglo que contiene los parámetros para la búsqueda por un campo por condición \n\t<ul>\t\n\t\t<li>formato:condición|campo|valor</li>\n\t\t<li>excepto la condición like que sería</li>\n\t\t<li>formato:like|campo|comodin|0</li>\n<li>Para el constructor de consultas con <strong>or</strong>,<strong>and</strong>,<strong>not</strong> , cada uno sería un objeto en el cual contendría un arreglo con las condiciones para la consulta,<strong>Ejemplo</strong>\n\t\t<ul>\n\t\t  <li>\n\t\t  <pre>\n\t\t  {\n            \"and\": [\n                {\n                     \"or\": [\n                          {\n                             \"0\": \"<|campo|valor\"\n                          },\n                          {\n                              \"1\": \"like|campo|%valor%|0\"\n                          }\n                      ]\n                }\n            ]\n        },\n        {\n            \"and\": [\n                {\n                    \"and\": [\n                        {\n                            \"0\": \">|campo|valor\"\n                        },\n                        {\n                            \"1\": \"like|campo|%valor%|0\"\n                        }\n                    ]\n                }\n            ]\n        }\n        </pre>\n <strong> ejecutaría and((campo > valor) or (campo like %valor%) ) and ((campo > valor) and (campo like %valor%) )</strong>\n\t\t  </li>\n\t\t</ul>\n\t\t</li>\t</ul>\n</li>\n</li>\n<li>orderby-- atributo arreglo que contiene los parámetros para ordenar la consulta,<strong>según campo y tipo de ordenamiento</strong> \n\t<ul>\t\n\t\t<li>formato</li>\n\t\t<ul>\n\t\t<li>campo:valor</li>\n\t\t</ul>\n\t\t<li>valor=3 descendente </li>\n\t\t<li>valor=4 ascendentemente </li>\n\t</ul>\n</li>\n\t\t\n</ul>\nDevuelve la peticion con el formato para consumir con el select2","response":[]}},{"name":"evaluation_view","request":{"method":"GET","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation","description":"Servicio para devolver un  elemento de la tabla evaluation\n\nMétodos que permite <b>PUT y GET</b>\n\nSe le pueden pasar parámetros de búsqueda siguiendo el formato JSON de a continuación,siempre mandando el id de la tabla por el método <b>GET</b>:\n<ul>\n<li>relations-- atributo arreglo que contiene los nombres de la relaciónes del modelo si quiere devolver el resultado serializado, puede especificar el nombre de cada uno en la petición y si los quieres todos pone la palabra \"all\".</li>\n</ul>","response":[]}},{"name":"evaluation_create","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation","description":"Servicio para crear uno o varios elementos en la tabla evaluation \nmétodos que permite <b>POST</b> \nLos parámetros para la inserción serán de varias formas:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n <li> Arreglo  de objetos formato Json y como atributos cada uno de los campos de la tabla, este arreglo debe tener el nombre del modelo \n <p style=\"color= green\">Ej: \n  {\n    \"Nombre Modelo\": [\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        },\n        {\n            \"atributo_1\": \"valor\",\n            \"atributo_2\": \"valor\"\n        }\n    ]\n}\n  </p>\n \n </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, en caso de mandarse un arreglo en el campo <b>success</b> si fue exitosa o no la petición, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo","response":[]}},{"name":"evaluation_update","request":{"method":"PUT","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/0","description":"\"Servicio para actualizar un elemento en la tabla evaluation \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán de varias formas, siempre mandando el id de la tabla por el método <b>GET</b>:\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado,\"","response":[]}},{"name":"evaluation_update_multiple","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/update_multiple","description":"\"Servicio para actualizar varios elemento en la tabla evaluation \nmétodos que permite <b>PUT o PATCH</b> \nLos parámetros para la actualización serán un arreglo con los datos de los objetos a actualizar:\n <ul>Parámetros:\n <li> Arreglo en formato Json con el nombre del modelo y los objetos con sus atributos\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":[{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t},\n{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}]\n  }\n  </p></li>\n \n </ul>\n \n En la respuesta se detallarán los errores si los tiene  de lo contrario se devolverá el objeto insertado, si la clase a actualizar es hija de otra clase se le pasan tanto los parámetros del padre y del hijo \"","response":[]}},{"name":"evaluation_delete","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/0","description":"Servicio para eliminar un elemento en la tabla evaluation \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia por <b>GET</b> el id de la tabla","response":[]}},{"name":"evaluation_delete_parameters","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/delete_parameters","description":"Servicio para eliminar un elemento en la tabla evaluation \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro JSON las condiciones de búsqueda \nlos mismos parámetros y condiciones del servicio list","response":[]}},{"name":"evaluation_delete_by_id","request":{"method":"DELETE","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/delete_by_id","description":"Servicio para eliminar un elemento en la tabla evaluation \nmétodos que permite <b>DELETE</b>.</br>\nSe le envia como parámetro un arreglo con el id de cada elemento a eliminar\n<ul>Parámetros:\n  <li>Arreglo en formato Json de la llave primaria de la tabla\n[\n  {\n    \"id_tabla\":\"valor\"\n},\n  {\n    \"id_tabla\":\"valor\"\n}, \n {\n    \"id_tabla\":\"valor\"\n}\n]\n</li>\n<li> Arreglo de valor de llave primaria de la tabla\n  [valor,valor,calor] \n</li>\n</ul>\n","response":[]}},{"name":"evaluation_validate","request":{"method":"POST","header":[{"key":"Content-Type","name":"Content-Type","value":"application/json","type":"text"}],"body":{"mode":"raw","raw":""},"url":"http://localhost/sport_crm/api/web/managment/evaluation/validate","description":"Servicio para validar un elemento en la tabla evaluation \nmétodos que permite <b>POST</b> \n\n <ul>Parámetros:\n <li> Formato Json con cada uno de los campos de la tabla y esta accion se ejecutara para el escenario por defecto del modelo \n <p style=\"color= green\">Ej: \n  {\n  \t\"atributo_1\":\"valor\",\n  \t\"atributo_2\":\"valor\"\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n <li> Objeto en formato Json con el nombre del modelo y como atributos cada uno de los campos de la tabla y en el campo opcional <strong>_scenario</strong> el nombre del escenario donde se ejecutará la acción y en el campo <strong>_specific</strong> con valor true si quieres solamente validar los campos enviados como parametro\n  <p style=\"color= green\">Ej: \n  {\n  \t\"Nombre Modelo\":{\"\n  \t\tatributo_1\":\"valor\",\n  \t\t\"atributo_2\":\"valor\"\n\t}\n  \t\"_scenario\":\"valor\"\n  }\n  </p>\n  </li>\n </ul>\n \n En la respuesta se detallarán los errores si los tiene.","response":[]}}],"_postman_isSubFolder":true}],"_postman_isSubFolder":true}]}]}
