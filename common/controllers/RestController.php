<?php

/**Generate by ASGENS
*@author Charlietyn  
*@date Wed Sep 02 19:35:13 GMT-04:00 2020  
*@time Wed Sep 02 19:35:13 GMT-04:00 2020  
*/
namespace common\controllers;

use common\services\Services;
use yii\web\NotFoundHttpException;
use yii\web\HttpException;

class RestController extends SecureController
 {/**
     * {@inheritdoc}
     */

    public $modelClass = '';
    public $service;

    /**
     * @var string the name of the view action. This property is need to create the URL when the model is successfully created.
     */
    public $viewAction = 'view';

    /*Para que el response salga con paginado , o sea la respuesta se va a devolver en un arreglo llamado items , y su paginado*/

    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'items',
    ];

    public function behaviors()
    {
        return parent::behaviors();
    }

    public function getService()
    {
        if ($this->service == null)
            $this->service = new Services($this->modelClass);
        return $this->service;
    }

    /**
     * {@inheritdoc}
     * redefine las acciones restful de la controladora
     */
    public function actions()
    {
        return [];
    }

    public function checkAccess($action, $model = null, $params = [])
    {
        parent::checkAccess($action, $model, $params); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     * Asignar a cada accion por el metodo por el que va a salir
     */
    protected function verbs()
    {
        return [
            'index' => ['GET', 'HEAD', 'PUT', 'OPTIONS', 'POST'],
            'find_parameters' => ['GET', 'HEAD', 'PUT', 'OPTIONS'],
            'update_multiple' => ['POST','PUT','PATCH','OPTIONS'],
            'validate' => ['POST', 'OPTIONS'],
            'delete_parameters' => ['DELETE', 'OPTIONS'],
            'select_2_list' => ['GET', 'HEAD', 'PUT', 'OPTIONS', 'POST'],
        ];
    }

    public function actionValidate()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        return $this->getService()->validate($params);
    }

    public function actionIndex()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        if (count($_GET) > 0)
            $params = array_merge($params, $_GET);
        $params = $this->process_params($params);
        return $this->getService()->list($params);
    }

    public function process_params(&$params)
    {
        foreach ($params as $key => $param) {
            if ($key === 'relations' || $key === 'select' )
                continue;
            if ((!is_string($param) || $param == "all") && !is_array($param))
                continue;
            if (is_array($param)) {
                $params[$key] = $this->process_params($param);
                continue;
            }
            $params[$key] = json_decode($param, true) != null ? json_decode($param, true) : $params;
        }
        return $params;
    }

    public function actionView($id)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        if (count($_GET) > 0)
            $params = array_merge($params, $_GET);
        $model = $this->getService()->view($id, $params);
        if (is_null($model)) {
            \Yii::$app->getResponse()->setStatusCode(404);
               throw new NotFoundHttpException('Element not found.');
        }
        return $model;


    }

    public function actionSelect_2_list()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        if (count($_GET) > 0)
            $params = array_merge($params, $_GET);
        $params = $this->process_params($params);
        return $this->getService()->select2_list($params);
    }

    public function actionCreate()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        if(count($params)==0)
            throw new HttpException(500,"Theres no parameters in request");
        return $this->getService()->create($params);

    }

    public function actionUpdate($id)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        $model = $this->getService()->update($id, $params);
        if (is_null($model)) {
            \Yii::$app->getResponse()->setStatusCode(404);
               throw new NotFoundHttpException('Element not found.');
        }
        return $model;

    }

    public function actionUpdate_multiple()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        if(count($params)==0)
            throw new HttpException(500,"Theres no parameters in request");
        return $this->getService()->update_multiple($params);

    }

    public function actionDelete_parameters()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        return count($params)>0?$this->getService()->delete_parameters($params):["message"=>"Please send parameters"];


    }


    public function actionDelete_by_id()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $params = \Yii::$app->request->getBodyParams();
        return $this->getService()->delete_by_id($params);
    }

    public function actionDelete($id)
    {
        $model= $this->getService()->delete($id);
        if (is_null($model)) {
            \Yii::$app->getResponse()->setStatusCode(404);
            throw new NotFoundHttpException('Element not found.');
        }
        return $model;
    }
}



